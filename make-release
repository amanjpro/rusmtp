#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

if [ "$#" -ne 1 ]; then
  echo "You must pass the version to be released"
  exit 1
fi

RELEASE_VERSION="$1"

MINOR_VERSION=$(echo "$RELEASE_VERSION" | sed 's/^.*\.\(.*\)\..*$/\1/g')
NEXT_MINOR_VERSION=$((MINOR_VERSION + 1))
MAJOR_VERSION=$(echo "$RELEASE_VERSION" | sed 's/^\(.*\)\..*\..*$/\1/g')
NEXT_SNAPSHOT_VERSION="$MAJOR_VERSION.$NEXT_MINOR_VERSION.0-SNAPSHOT"

# Update Cargo versions

update_cargo() {
  local path="$1"
  local version="$2"
  sed "s/^version = \".*\"$/version = \"$version\"/g" <"$path" >tmp
  mv tmp "$path"
}

build() {
  # Compile the project
  cargo update
  cargo build --release --manifest-path main/Cargo.toml
}

archive() {
  rm -rf rusmtp-"$RELEASE_VERSION"
  mkdir rusmtp-"$RELEASE_VERSION"
  cp target/release/rusmtpc rusmtp-"$RELEASE_VERSION"/
  cp target/release/rusmtpd rusmtp-"$RELEASE_VERSION"/
  cp rusmtprc.default rusmtp-"$RELEASE_VERSION"/
  cp install rusmtp-"$RELEASE_VERSION"/
  cp uninstall rusmtp-"$RELEASE_VERSION"/
  cp COPYING rusmtp-"$RELEASE_VERSION"/
  cp README.md rusmtp-"$RELEASE_VERSION"/
  cp doc/rusmtpd.1 rusmtp-"$RELEASE_VERSION"/
  cp doc/rusmtpc.1 rusmtp-"$RELEASE_VERSION"/

  tar -czf rusmtp-"$RELEASE_VERSION".tar.gz rusmtp-"$RELEASE_VERSION"/*
}


update_cargo "main/Cargo.toml" "$RELEASE_VERSION"
update_cargo "esmtp-client/Cargo.toml" "$RELEASE_VERSION"
update_cargo "common/Cargo.toml" "$RELEASE_VERSION"

build


git add {main,esmtp-client,common}/Cargo.toml
git commit -m "Bump version to $RELEASE_VERSION"
git tag -a "$RELEASE_VERSION" -m "Release $RELEASE_VERSION"

archive

update_cargo "main/Cargo.toml" "$NEXT_SNAPSHOT_VERSION"
update_cargo "esmtp-client/Cargo.toml" "$NEXT_SNAPSHOT_VERSION"
update_cargo "common/Cargo.toml" "$NEXT_SNAPSHOT_VERSION"

build

git add {main,esmtp-client,common}/Cargo.toml
git commit -m "Bump version to $NEXT_SNAPSHOT_VERSION"

git push origin HEAD
git push --tags
